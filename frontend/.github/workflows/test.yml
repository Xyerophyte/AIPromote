name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit and Integration Testing
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type checking
      run: npm run type-check
    
    - name: Linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Run security tests
      run: npm run test:security
    
    - name: Run database migration tests
      run: npm run test:migrations
    
    - name: Generate coverage report
      run: npm run test:coverage
    
    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Snapshot Testing
  snapshot-tests:
    name: Snapshot Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run snapshot tests
      run: npm run test:snapshots
    
    - name: Check for snapshot changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ùå Snapshots have changed. Please run 'npm run test:snapshots:update' locally and commit the changes."
          git status
          exit 1
        else
          echo "‚úÖ All snapshots match."
        fi

  # End-to-End Testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm run start &
      env:
        PORT: 3001
    
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3001 --timeout 60000
    
    - name: Run E2E tests
      uses: cypress-io/github-action@v6
      with:
        wait-on: 'http://localhost:3001'
        wait-on-timeout: 120
        browser: chrome
        config: baseUrl=http://localhost:3001
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
    
    - name: Upload E2E test videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos

  # Load Testing (only on main branch and releases)
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm run start &
      env:
        PORT: 3001
    
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3001 --timeout 60000
    
    - name: Run load tests
      run: k6 run tests/load/k6-load-tests.js
      env:
        BASE_URL: http://localhost:3001
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: |
          summary.json
          *.html

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
    
    - name: Run security tests
      run: npm run test:security
    
    - name: OWASP ZAP Baseline Scan
      if: github.ref == 'refs/heads/main'
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3001'

  # Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for ${{ matrix.environment }}
      run: npm run build
      env:
        NODE_ENV: ${{ matrix.environment }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Analyze bundle size
      if: matrix.environment == 'production'
      run: npm run perf:build-size
    
    - name: Check build artifacts
      run: |
        ls -la .next/
        du -sh .next/
        echo "‚úÖ Build completed successfully for ${{ matrix.environment }}"

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm run start &
      env:
        PORT: 3001
    
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3001 --timeout 60000
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3001
          http://localhost:3001/auth/signin
          http://localhost:3001/dashboard
        configPath: './.lighthouserc.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Accessibility Testing
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm run start &
      env:
        PORT: 3001
    
    - name: Wait for application to be ready
      run: npx wait-on http://localhost:3001 --timeout 60000
    
    - name: Run axe-core accessibility tests
      run: |
        npx @axe-core/cli http://localhost:3001 --exit
        npx @axe-core/cli http://localhost:3001/auth/signin --exit
        npx @axe-core/cli http://localhost:3001/dashboard --exit

  # Deployment Preview Tests
  vercel-preview-tests:
    name: Vercel Preview Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      id: vercel-deploy
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: Comment Preview URL
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ Preview deployment ready!\n\n‚úÖ Preview URL: ${{ steps.vercel-deploy.outputs.preview-url }}\n\nThe preview will be automatically tested for:\n- Functionality\n- Performance\n- Accessibility\n- Security`
          })
    
    - name: Test Preview Deployment
      run: |
        curl -f ${{ steps.vercel-deploy.outputs.preview-url }} || exit 1
        echo "‚úÖ Preview deployment is accessible"

  # Final Status Check
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, snapshot-tests, e2e-tests, security-audit, build-verification, accessibility-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-integration-tests.result }}" == "success" ]; then
          echo "‚úÖ Unit & Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Unit & Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.snapshot-tests.result }}" == "success" ]; then
          echo "‚úÖ Snapshot Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Snapshot Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "‚úÖ E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "‚úÖ Security Audit: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Security Audit: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-verification.result }}" == "success" ]; then
          echo "‚úÖ Build Verification: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Build Verification: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.accessibility-tests.result }}" == "success" ]; then
          echo "‚úÖ Accessibility Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Accessibility Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed results in the Actions tab." >> $GITHUB_STEP_SUMMARY
