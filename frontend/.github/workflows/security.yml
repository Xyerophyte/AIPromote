name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependency
          - code
          - container
          - secrets

env:
  NODE_VERSION: '18'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependency' || github.event.inputs.scan_type == null }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        echo "📊 Running npm audit"
        npm audit --audit-level=moderate --output=json > npm-audit.json || true
        npm audit --audit-level=moderate
    
    - name: Run Snyk vulnerability scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=package.json
    
    - name: Upload Snyk results to GitHub Code Scanning
      if: env.SNYK_TOKEN != ''
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
    
    - name: Dependency vulnerability report
      run: |
        echo "📋 Generating dependency vulnerability report"
        
        if [ -f "npm-audit.json" ]; then
          HIGH_VULNS=$(cat npm-audit.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length')
          CRITICAL_VULNS=$(cat npm-audit.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length')
          
          echo "## 🔒 Dependency Security Report" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical**: $CRITICAL_VULNS vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- **High**: $HIGH_VULNS vulnerabilities" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found - blocking deployment" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        fi
    
    - name: Upload security scan artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          npm-audit.json
          snyk.sarif

  # Static code analysis security scan
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == null }}
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        queries: security-and-quality
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application for analysis
      run: npm run build
      env:
        NODE_ENV: development
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:javascript"
    
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/react
          p/nextjs
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: ESLint security scan
      run: |
        echo "🔍 Running ESLint security rules"
        npx eslint . --ext .js,.jsx,.ts,.tsx \
          --config .eslintrc.security.js \
          --format json \
          --output-file eslint-security-report.json || true
    
    - name: Upload code security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-security-scan-results
        path: |
          eslint-security-report.json

  # Container security scanning
  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == null }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        echo "🏗️ Building Docker image for security scanning"
        docker build -t aipromoter-security-scan:latest -f Dockerfile.prod .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'aipromoter-security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Docker Bench Security
      run: |
        echo "🔒 Running Docker Bench Security"
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/docker-containerd:/usr/bin/docker-containerd:ro \
          -v /usr/bin/docker-runc:/usr/bin/docker-runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-results.txt || true
    
    - name: Container security report
      run: |
        echo "## 🐳 Container Security Report" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "trivy-results.sarif" ]; then
          echo "Trivy scan completed - results uploaded to Security tab" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "docker-bench-results.txt" ]; then
          WARNINGS=$(grep -c "WARN" docker-bench-results.txt || echo "0")
          echo "- Docker Bench warnings: $WARNINGS" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload container security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-security-scan-results
        path: |
          trivy-results.sarif
          docker-bench-results.txt

  # Secret scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == null }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Secrets scan report
      run: |
        echo "## 🔑 Secrets Scanning Report" >> $GITHUB_STEP_SUMMARY
        echo "- GitLeaks scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- TruffleHog scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- Check workflow logs for any detected secrets" >> $GITHUB_STEP_SUMMARY

  # OWASP ZAP baseline scan
  owasp-zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.scan_type == 'all' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm run start &
      env:
        PORT: 3000
    
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
    
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -j -m 10 -T 60'
    
    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: zap-scan-results
        path: report_html.html

  # License compliance check
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == null }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check license compliance
      run: |
        echo "📄 Checking license compliance"
        npx license-checker --summary --excludePrivatePackages > license-report.txt
        
        # Check for problematic licenses
        PROBLEMATIC_LICENSES="GPL-2.0|GPL-3.0|AGPL-1.0|AGPL-3.0"
        if grep -E "$PROBLEMATIC_LICENSES" license-report.txt; then
          echo "❌ Problematic licenses found"
          echo "## ⚠️ License Compliance Issues" >> $GITHUB_STEP_SUMMARY
          echo "Problematic licenses detected. Review license-report.txt for details." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ No problematic licenses found"
          echo "## ✅ License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "All dependencies use compatible licenses." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-compliance-report
        path: license-report.txt

  # Security summary report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, container-security-scan, secrets-scan, license-compliance]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
          echo "✅ **Dependency Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependency Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.code-security-scan.result }}" == "success" ]]; then
          echo "✅ **Code Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Security Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.container-security-scan.result }}" == "success" ]]; then
          echo "✅ **Container Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Container Security Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.secrets-scan.result }}" == "success" ]]; then
          echo "✅ **Secrets Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secrets Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.license-compliance.result }}" == "success" ]]; then
          echo "✅ **License Compliance**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **License Compliance**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps**:" >> $GITHUB_STEP_SUMMARY
        echo "- Review any failed scans and address security issues" >> $GITHUB_STEP_SUMMARY
        echo "- Check the Security tab for detailed vulnerability reports" >> $GITHUB_STEP_SUMMARY
        echo "- Download scan artifacts for detailed analysis" >> $GITHUB_STEP_SUMMARY
    
    - name: Security gate check
      run: |
        if [[ "${{ needs.dependency-scan.result }}" == "failure" ]]; then
          echo "🚫 Security gate failed: Critical vulnerabilities in dependencies"
          exit 1
        fi
        
        if [[ "${{ needs.secrets-scan.result }}" == "failure" ]]; then
          echo "🚫 Security gate failed: Secrets detected in code"
          exit 1
        fi
        
        echo "✅ Security gate passed"
    
    - name: Create security issue if scans fail
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🔒 Security Scan Failures - ${new Date().toISOString().split('T')[0]}`,
            body: `## Security Scan Failures Detected
            
            **Branch**: ${{ github.ref_name }}
            **Commit**: ${{ github.sha }}
            **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### Failed Scans
            
            ${{ needs.dependency-scan.result == 'failure' && '- ❌ Dependency Scan' || '' }}
            ${{ needs.code-security-scan.result == 'failure' && '- ❌ Code Security Scan' || '' }}
            ${{ needs.container-security-scan.result == 'failure' && '- ❌ Container Security Scan' || '' }}
            ${{ needs.secrets-scan.result == 'failure' && '- ❌ Secrets Scan' || '' }}
            ${{ needs.license-compliance.result == 'failure' && '- ❌ License Compliance' || '' }}
            
            ### Action Required
            
            1. Review the failed security scans in the workflow run
            2. Address any critical or high-severity vulnerabilities
            3. Fix any detected secrets or license issues
            4. Re-run security scans to verify fixes
            
            **Priority**: High
            **Assignees**: Security team, Development team`,
            labels: ['security', 'high-priority', 'bug']
          });
          
          console.log(`Created security issue: ${issue.data.html_url}`);
