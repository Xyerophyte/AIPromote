config:
  target: 'http://localhost:3000'
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 5
      name: "Warm-up phase"
    # Load testing phase
    - duration: 300
      arrivalRate: 20
      name: "Load testing phase"
    # Stress testing phase
    - duration: 120
      arrivalRate: 50
      name: "Stress testing phase"
    # Cool-down phase
    - duration: 60
      arrivalRate: 10
      name: "Cool-down phase"
  processor: "./load-test-functions.js"
  payload:
    path: "./test-users.csv"
    fields:
      - "email"
      - "password"
      - "firstName"
      - "lastName"
      - "organizationName"
  defaults:
    headers:
      Content-Type: 'application/json'

scenarios:
  - name: "Authentication Flow"
    weight: 30
    flow:
      - post:
          url: "/auth/register"
          beforeRequest: "generateTestUser"
          json:
            email: "{{ email }}"
            password: "{{ password }}"
            firstName: "{{ firstName }}"
            lastName: "{{ lastName }}"
            organizationName: "{{ organizationName }}"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 201
      - post:
          url: "/auth/login"
          json:
            email: "{{ email }}"
            password: "{{ password }}"
          expect:
            - statusCode: 200

  - name: "Content Generation"
    weight: 40
    flow:
      - post:
          url: "/auth/login"
          beforeRequest: "getExistingUser"
          json:
            email: "{{ email }}"
            password: "{{ password }}"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 200
      - post:
          url: "/api/v1/content/generate"
          headers:
            Authorization: "Bearer {{ authToken }}"
          beforeRequest: "generateContentRequest"
          json:
            platform: "{{ platform }}"
            contentType: "{{ contentType }}"
            context:
              targetAudience: "{{ targetAudience }}"
              tone: "{{ tone }}"
              keywords: ["{{ keyword1 }}", "{{ keyword2 }}"]
            variations:
              count: "{{ variationCount }}"
              diversityLevel: "{{ diversityLevel }}"
            optimization:
              seo: true
              engagement: true
              conversion: false
              brandSafety: true
          capture:
            - json: "$.id"
              as: "contentId"
          expect:
            - statusCode: 200

  - name: "Content Management"
    weight: 20
    flow:
      - post:
          url: "/auth/login"
          beforeRequest: "getExistingUser"
          json:
            email: "{{ email }}"
            password: "{{ password }}"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 200
      - get:
          url: "/api/v1/content"
          headers:
            Authorization: "Bearer {{ authToken }}"
          qs:
            page: 1
            limit: 10
          expect:
            - statusCode: 200
      - get:
          url: "/api/v1/content?platform=TWITTER"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200

  - name: "Analytics Dashboard"
    weight: 10
    flow:
      - post:
          url: "/auth/login"
          beforeRequest: "getExistingUser"
          json:
            email: "{{ email }}"
            password: "{{ password }}"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 200
      - get:
          url: "/api/v1/analytics/dashboard"
          headers:
            Authorization: "Bearer {{ authToken }}"
          qs:
            startDate: "2024-01-01"
            endDate: "2024-01-31"
            groupBy: "day"
          expect:
            - statusCode: 200
      - get:
          url: "/api/v1/analytics/realtime"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200

  - name: "Health Check"
    weight: 5
    flow:
      - get:
          url: "/health"
          expect:
            - statusCode: 200
            - hasProperty: "status"

# Performance thresholds
metrics:
  # Response time metrics
  - name: "http.response_time"
    threshold: 2000  # 2 seconds max response time
  - name: "http.response_time.p95"
    threshold: 3000  # 95th percentile under 3 seconds
  - name: "http.response_time.p99"
    threshold: 5000  # 99th percentile under 5 seconds
  
  # Error rate metrics
  - name: "http.request_rate"
    threshold: 100   # At least 100 requests per second
  - name: "http.codes.2xx"
    threshold: 95    # At least 95% success rate
  - name: "http.codes.4xx"
    threshold: 5     # Less than 5% client errors
  - name: "http.codes.5xx"
    threshold: 1     # Less than 1% server errors

plugins:
  metrics-by-endpoint:
    useOnlyRequestNames: true
